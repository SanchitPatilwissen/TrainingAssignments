CREATE TYPE MARITAL_STATUS_TYPE AS ENUM('YES', 'NO');

CREATE TYPE DESIGNATION_TYPE AS ENUM('PROGRAMMAR', 'TESTER', 'ADMIN', 'MANAGER');

CREATE TABLE EMPLOYEE (
	EID INT PRIMARY KEY,
	NAME VARCHAR(20) NOT NULL,
	AGE SMALLINT NOT NULL CHECK (
		AGE > 20
		AND AGE <= 60
	),
	SALARY DECIMAL(9, 2) DEFAULT 15000.00,
	DESIGNATION DESIGNATION_TYPE NOT NULL,
	MGR_ID INT,
	EMAIL_ID VARCHAR(100) UNIQUE NOT NULL CHECK (EMAIL_ID ~* '^[A-Za-z0-9]+@[A-Za-z]+.com$'),
	MARITAL_STATUS MARITAL_STATUS_TYPE NOT NULL,
	JOINING_DATE DATE DEFAULT CURRENT_DATE,
	CONSTRAINT FK_MANAGER FOREIGN KEY (MGR_ID) REFERENCES EMPLOYEE (EID)
);

INSERT INTO
	EMPLOYEE (
		EID,
		NAME,
		AGE,
		SALARY,
		DESIGNATION,
		MGR_ID,
		EMAIL_ID,
		MARITAL_STATUS
	)
VALUES
	(
		1,
		'Kiran Talele',
		55,
		110000,
		'TESTER',
		23,
		'KiranTalele@spit.com',
		'YES'
	);

UPDATE EMPLOYEE
SET
	MGR_ID = NULL
WHERE
	EID = 23;

SELECT
	*
FROM
	EMPLOYEE
ORDER BY
	EID DESC;

SELECT
	COALESCE(DESIGNATION, 'ADMIN') AS DESIGNATION,
	SUM(SALARY)
FROM
	EMPLOYEE
GROUP BY
	ROLLUP (DESIGNATION)
ORDER BY
	SUM(SALARY);

SELECT
	*
FROM
	EMPLOYEE
WHERE
	NAME LIKE 'S%'
	AND DESIGNATION <> 'MANAGER';

CREATE TABLE ROLE (
	DESIGNATION DESIGNATION_TYPE PRIMARY KEY,
	MAX_LIMIT INT NOT NULL,
	MIN_SALARY DECIMAL(9, 2) NOT NULL
);

DROP TABLE ROLE;

INSERT INTO
	ROLE (DESIGNATION, MAX_LIMIT, MIN_SALARY)
VALUES
	('PROGRAMMAR', 100, 30000),
	('MANAGER', 10, 70000),
	('ADMIN', 2, 100000),
	('TESTER', 100, 20000);

SELECT
	*
FROM
	ROLE;

SELECT
	*
FROM
	EMPLOYEE E
	JOIN ROLE R ON E.DESIGNATION = R.DESIGNATION;

SELECT
	*
FROM
	EMPLOYEE E
	JOIN ROLE R ON E.DESIGNATION = R.DESIGNATION
WHERE
	E.SALARY <= R.MIN_SALARY;

SELECT
	E1.EID,
	E1.NAME AS EMPLOYEE_NAME,
	E1.SALARY AS EMPLOYEE_SALARY,
	E2.EID,
	E2.NAME AS MANAGER_NAME,
	E2.SALARY AS MANAGER_SALARY
FROM
	EMPLOYEE E1
	JOIN EMPLOYEE E2 ON E1.MGR_ID = E2.EID
WHERE
	E1.SALARY > E2.SALARY;

CREATE
OR REPLACE PROCEDURE ABC (
	EID INT,
	ENAME VARCHAR(20),
	AGE INT,
	EMAIL VARCHAR(100)
) LANGUAGE PLPGSQL AS $$
begin
	insert into EMPLOYEE values
	(
		eid,
		ename,
		age,
		80000,
		'MANAGER',
		null,
		email,
		'YES'
	);	
end
$$
CALL ABC (37, 'Hema Sagbhor', 34, 'hemSag56@gmail.com');

CREATE
OR REPLACE PROCEDURE APPRAISAL (EMPID INT) LANGUAGE PLPGSQL AS $$
begin
	update EMPLOYEE set salary = salary + 5000 where eid = empid;
end;
$$
CALL APPRAISAL (23);

CREATE
OR REPLACE FUNCTION MAX_SALARY (DESIG DESIGNATION_TYPE) RETURNS TABLE (EMPID INT, ENAME VARCHAR, ESALARY DECIMAL) AS $$
begin
	return query
	select eid, name, salary from EMPLOYEE where designation = desig and salary = (select max(salary) from EMPLOYEE where designation = desig);
end;
$$ LANGUAGE PLPGSQL;

DROP FUNCTION MAX_SALARY;

SELECT
	*
FROM
	MAX_SALARY ('TESTER');

SELECT
	EID,
	NAME,
	SALARY,
	LEAD(SALARY, 1, 0) OVER (
		PARTITION BY
			DESIGNATION
		ORDER BY
			EID
	)
FROM
	EMPLOYEE;

WITH
	CTE AS (
		SELECT
			EID,
			NAME,
			SALARY,
			DESIGNATION,
			AVG(SALARY) OVER (
				PARTITION BY
					DESIGNATION
			) AS AVERAGE_SALARY
		FROM
			EMPLOYEE
	)
SELECT
	*
FROM
	CTE
WHERE
	CTE.AVERAGE_SALARY < CTE.SALARY;

CREATE
OR REPLACE FUNCTION VALIDATE_SALARY () RETURNS TRIGGER AS $$
begin
	if new.salary<12000 then
		new.salary = 12000;
	end if;
	return new;
end;
$$ LANGUAGE PLPGSQL;

CREATE
OR REPLACE TRIGGER BEFORE_UPDATING_SALARY BEFORE
UPDATE ON EMPLOYEE FOR EACH ROW
EXECUTE FUNCTION VALIDATE_SALARY ();

UPDATE EMPLOYEE
SET
	SALARY = 10000
WHERE
	NAME = 'Kaif Ali Sayyed';

CREATE
OR REPLACE PROCEDURE DUMMY_RECORD () LANGUAGE PLPGSQL AS $$
begin
	insert into emp values ('Kanishka', 31);
end;
$$

SELECT
	*
FROM
	EMP;